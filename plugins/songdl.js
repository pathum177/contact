const { cmd } = require('../lib/command');
const yts = require('yt-search');
const ytdl = require('@distube/ytdl-core');
const fs = require('fs');
const path = require('path');

cmd({
    pattern: 'song7 ?(.*)',
    react: 'üé∂',
    desc: 'Download MP3 from YouTube',
    category: 'main',
    filename: __filename
}, async (conn, m, msg, { q, reply }) => {
    try {
        if (!q) return reply('‚ùå *‡∂ú‡∑ì‡∂≠‡∂∫‡∑ö ‡∂±‡∂∏ ‡∑Ñ‡∑ù YouTube link ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.*');

        // üîç Search YouTube
        const search = await yts(q);
        if (!search || !search.videos.length) return reply('‚ùå *‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.*');

        const video = search.videos[0];
        const url = video.url;

        // üìù Fancy caption
        let caption = `üéµ *LUXALGO DOWNLOADER*\n\n` +
                      `üìå *Title:* ${video.title}\n` +
                      `üìÄ *Author:* ${video.author.name}\n` +
                      `‚è± *Duration:* ${video.timestamp}\n` +
                      `üëÄ *Views:* ${video.views.toLocaleString()}\n` +
                      `üìÖ *Uploaded:* ${video.ago}\n` +
                      `üîó *URL:* ${url}\n\n` +
                      `‚¨áÔ∏è *Downloading audio...*`;

        await conn.sendMessage(m.chat, {
            image: { url: video.thumbnail },
            caption
        }, { quoted: m });

        // üì• Download as mp3
        const filePath = path.join(__dirname, `../temp/${Date.now()}.mp3`);
        const stream = ytdl(url, { filter: 'audioonly', quality: 'highestaudio' });
        const writeStream = fs.createWriteStream(filePath);
        stream.pipe(writeStream);

        writeStream.on('finish', async () => {
            await conn.sendMessage(m.chat, {
                audio: fs.readFileSync(filePath),
                mimetype: 'audio/mp4',
                ptt: false
            }, { quoted: m });

            fs.unlinkSync(filePath);
        });

    } catch (err) {
        console.error(err);
        reply('‚ùå Error downloading song.');
    }
});
